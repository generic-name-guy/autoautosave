#library "Autoautosave"
#include "zcommon.acs"

script "m8f_aas_Save" (void)
{
  Autosave();
}

// Global variables

/*
bool enabled;

int  timeCounter = 0;
int  health = 0;

int  minBossHealth;
int  saveMinWait;
int  healthLimit;

bool massiveAlertEnabled;
bool bossAlertEnabled;
int  alertLimit;
int  alertCountOld = 0;
*/
// Helper functions

/*
function void AS_Save(str message)
{
  Autosave();
  timeCounter = 0;
  AS_Log(message);
}

function bool AS_ShouldSaveNow(void)
{
  return (enabled
          && timeCounter > saveMinWait
          && health >= healthLimit);
}

function void AS_SaveIfCVar(str cvarName, str message)
{
  bool ifSave = GetCVar(cvarName);
  if  (ifSave && AS_ShouldSaveNow()) { AS_Save(message); }
}

function void AS_SaveIf(bool condition, str message)
{
  if (condition && AS_ShouldSaveNow()) { AS_Save(message); }
}

// Scripts

script "m8f_ManualAutoSave" (void) { AS_Save("Manual save"); }

script "m8f_WeaponPickupAutoSave" (void)
{
  AS_SaveIfCVar("M8fAasSaveOnWeapon", "Autosave: weapon found");
}

script "m8f_KeyPickupAutoSave" (void)
{
  AS_SaveIfCVar("M8fAasSaveOnKeys", "Autosave: key found");
}

script "m8f_PowerupPickupAutoSave" (void)
{
  AS_SaveIfCVar("M8fAasSaveOnPowerup", "Autosave: powerup found");
}

script "m8f_BackpackPickupAutoSave" (void)
{
  AS_SaveIfCVar("M8fAasSaveOnBackpack", "Autosave: backpack found");
}

script "m8f_AlertSave" (void)
{
  if (!massiveAlertEnabled || !AS_ShouldSaveNow()) { terminate; }

  int alertCount = ThingCountName("AutoautosaveAlertToken", 0) - alertCountOld;
  alertCountOld = alertCount;

  AS_SaveIf((alertCount >= alertLimit), "Autosave: you were spotted");
}

script "m8f_BossAlertSave" (void)
{
  if (!bossAlertEnabled || !AS_ShouldSaveNow()) { terminate; }

  AS_Save("Autosave: you were spotted by boss");
}

script "m8f_CheckKill" Kill
{
  // I need to mark a moment that a map has finished loading, why not here?
  SetCVar("M8fAasMapLoaded", true);

  int maxHealth = GetActorProperty(0, APROP_SpawnHealth);

  AS_SaveIf((maxHealth >= minBossHealth), "Autosave: boss is killed");
}
*/
/*
script "m8f_Autoautosave" Enter
{
  bool allMonstersKilledOld = AS_IsAllMonsterKilled();
  bool allItemsFoundOld     = AS_IsAllItemsFound();
  int  secretsFoundOld      = AS_SecretsFound();

  str  armorOld             = AS_GetArmor();
  int  healthOld            = AS_GetHealth();
  int  armorValueOld        = AS_GetArmorValue();

  int  xOld = AS_GetX();
  int  yOld = AS_GetY();

  int playerN = PlayerNumber();

  while (true)
  {
    // update settings
    minBossHealth = GetCVar("M8fAasMinBossHealth") >> 16;
    healthLimit   = GetUserCVar(playerN, "M8fAasHealthLimit") >> 16;
    alertLimit    = GetUserCVar(playerN, "M8fAasMassiveAlertThreshold") >> 16;
    massiveAlertEnabled = GetUserCVar(playerN, "M8fAasSaveOnMassiveAlert");
    bossAlertEnabled    = GetUserCVar(playerN, "M8fAasSaveOnBossAlert");

    // check if may save in this second
    enabled = GetUserCVar(playerN, "M8fAasEnabled");
    saveMinWait   = GetUserCVar(playerN, "M8fAasMinSaveWait")   >> 16;
    if (!AS_ShouldSaveNow()) { ++timeCounter; Delay(35); continue; }

    // check events

    int autosavePeriod = (GetUserCVar(playerN, "M8fAasAutosavePeriod") >> 16) * 60;
    if (autosavePeriod != 0 && timeCounter >= autosavePeriod)
    {
      AS_Save("Periodic autosave");
    }

    bool saveOnHealthDrop = GetUserCVar(playerN, "M8fAasSaveOnHealthDrop");
    int healthThresholdDown = GetUserCVar(playerN, "m8f_aas_HealthThresholdDown");
    if (saveOnHealthDrop
        && healthOld >= healthThresholdDown
        && health     < healthThresholdDown)
      {}
    int healthThresholdUp   = GetUserCVar(playerN, "m8f_aas_HealthThresholdUp");
    int armorThresholdDown  = GetUserCVar(playerN, "m8f_aas_ArmorThresholdDown");
    int armorThresholdUp    = GetUserCVar(playerN, "m8f_aas_ArmorThresholdUp");

    bool saveOnBigHeal     = GetUserCVar(playerN, "M8fAasSaveOnBigHeal");
    bool saveOnArmorChange = GetUserCVar(playerN, "M8fAasSaveOnArmorChange");
    bool saveOnAllKilled   = GetUserCVar(playerN, "M8fAasSaveOnAllKilled");
    bool saveOnAllFound    = GetUserCVar(playerN, "M8fAasSaveOnAllFound");
    bool saveOnSecret      = GetUserCVar(playerN, "M8fAasSaveOnSecret");
    bool saveOnTeleport    = GetUserCVar(playerN, "M8fAasSaveOnTeleport");

    bool saveOnHealthRise = GetUserCVar(playerN, "M8fAasSaveOnHealthRise");
    bool saveOnArmorDrop  = GetUserCVar(playerN, "M8fAasSaveOnArmorDrop");
    bool saveOnArmorRise  = GetUserCVar(playerN, "M8fAasSaveOnArmorRise");

    health         = AS_GetHealth();
    int armorValue = AS_GetArmorValue();
    str armor      = AS_GetArmor();

    bool allMonstersKilled = AS_IsAllMonsterKilled();
    bool allItemsFound     = AS_IsAllItemsFound();
    int  secretsFound      = AS_SecretsFound();

    int x = AS_GetX();
    int y = AS_GetY();
    int deltaX = x - xOld;
    int deltaY = y - yOld;
    int dist = deltaX * deltaX + deltaY * deltaY;
    int maxRunDist = 2500000;

    bool mustAutosave = (saveOnBigHeal && health > healthOld + 25)
      || (saveOnArmorChange && armorOld != armor && StrCmp(armor, "None"))

      || (saveOnAllKilled && allMonstersKilledOld != allMonstersKilled)
      || (saveOnAllFound && allItemsFoundOld != allItemsFound)
      || (saveOnSecret && secretsFoundOld != secretsFound)
      || (saveOnTeleport   && dist > maxRunDist)


      || (saveOnHealthRise && healthOld <= healthThresholdUp   && health > healthThresholdUp)
      || (saveOnArmorDrop  && armorValueOld >= armorThresholdDown && armorValue < armorThresholdDown)
      || (saveOnArmorRise  && armorValueOld <= armorThresholdUp   && armorValue > armorThresholdUp)
      ;

    healthOld = health;
    armorOld  = armor;
    armorValueOld = armorValue;

    allMonstersKilledOld = allMonstersKilled;
    allItemsFoundOld     = allItemsFound;
    secretsFoundOld      = secretsFound;

    xOld = x;
    yOld = y;

    if (mustAutosave)
    {
      AS_Save("?");
    }

    ++timeCounter;
    Delay(35);
  }
}
*/
 /*
function bool AS_IsAllMonsterKilled(void)
{
  int totalMonsters  = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
  int killedMonsters = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
  return (totalMonsters == killedMonsters);
}

function bool AS_IsAllItemsFound(void)
{
  int totalItems = GetLevelInfo(LEVELINFO_TOTAL_ITEMS);
  int foundItems = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
  return (totalItems == foundItems);
}

function int AS_SecretsFound(void)
{
  return GetLevelInfo(LEVELINFO_FOUND_SECRETS);
}

function str AS_GetArmor(void)
{
  return GetArmorInfo(ARMORINFO_CLASSNAME);
}

function str AS_GetHealth(void)
{
  return GetActorProperty(0, APROP_HEALTH);
}

function str AS_GetArmorValue(void)
{
  return CheckInventory("BasicArmor");
}

function int AS_GetX(void)
{
  return GetActorX(0) >> 16;
}

function int AS_GetY(void)
{
  return GetActorY(0) >> 16;
}

function void AS_Log(str message)
{
  int playerN = PlayerNumber();
  bool isEventLogEnabled = GetUserCVar(playerN, "m8f_aas_LogEvents");
  if (isEventLogEnabled) { Log(s:message); }
}
*/
