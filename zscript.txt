version "3.2.5"

#include "m8f_aas_event.txt"

// Creates an m8f_aas_event when pickup up
// TODO: rewrite for new structure
class m8f_aas_token : Inventory
{
  private int event_type;

  Default
    {
      +Inventory.Quiet;
    }

  m8f_aas_token init(int type) { event_type = type; return self; }

  override bool TryPickup(Actor toucher)
  {
    let dispatcher = new("m8f_aas_event_dispatcher").init();
    dispatcher.on_event(event_type);
    GoAwayAndDie();
    return true;
  }
}

// Base class for all Aas event handlers
class m8f_aas_event_handler : Thinker
{
  virtual m8f_aas_event_handler init() { return self; }

  virtual void on_event(int event_type) {}
}

// Global list of Aas event handlers
class m8f_aas_event_handler_list : Thinker
{
  Array<m8f_aas_event_handler> handlers;

  m8f_aas_event_handler_list init()
  {
    ChangeStatNum(STAT_INFO);
    handlers.Push(new("m8f_aas_saver"  ).init());
    handlers.Push(new("m8f_aas_logger" ).init());
    handlers.Push(new("m8f_aas_printer").init());
    handlers.Push(new("m8f_aas_voice"  ).init());
    return self;
  }

  static m8f_aas_event_handler_list get()
  {
    let it = ThinkerIterator.Create("m8f_aas_event_handler_list", STAT_INFO);
    let p  = m8f_aas_event_handler_list(it.Next());

    if (p != null) { return p; }
    else           { return new("m8f_aas_event_handler_list").init(); }
  }
}

class m8f_aas_event_dispatcher : m8f_aas_event_handler
{
  override void on_event(int event_type)
  {
    let  list       = m8f_aas_event_handler_list.get();
    uint n_handlers = list.handlers.Size();

    for (uint i = 0; i < n_handlers; ++i)
      {
        list.handlers[i].on_event(event_type);
      }
  }
}

class m8f_aas_logger : m8f_aas_event_handler
{
  override void on_event(int event_type)
  {
    int console_level = CVar.GetCVar("m8f_aas_console_log_level").GetInt();
    if (event_type <= console_level
        && event_type != m8f_aas_event.tick)
      {
        Console.Printf(m8f_aas_event.message(event_type));
      }
  }
}

class m8f_aas_printer : m8f_aas_event_handler
{
  override void on_event(int event_type)
  {
    int screen_level = CVar.GetCVar("m8f_aas_screen_level").GetInt();
    if (event_type <= screen_level
        && event_type != m8f_aas_event.tick)
      {
        Console.MidPrint("smallfont", m8f_aas_event.message(event_type), true);
      }
  }
}

class m8f_aas_voice : m8f_aas_event_handler
{
  int last_save_time;

  override m8f_aas_event_handler init()
  {
    last_save_time = 0;
    return self;
  }

  override void on_event(int event_type)
  {
    int current_time          = level.time;
    int time_from_last_save_s = (current_time - last_save_time) / 35;
    if (time_from_last_save_s < 1) { return; }

    int voice_level = CVar.GetCVar("m8f_aas_voice_level").GetInt();
    if (event_type <= voice_level
        && event_type != m8f_aas_event.tick)
      {
        string voice_file = String.Format("aas/voice%d", event_type);
        Object.S_Sound(voice_file, CHAN_AUTO);
        last_save_time = current_time;
      }
  }
}

class m8f_aas_saver : m8f_aas_event_handler
{
  int last_save_time;

  private static bool saveEnabled(int event_type)
  {
    if (event_type == m8f_aas_event.manual) { return true; }

    bool enabled = CVar.GetCVar("m8f_aas_enabled").GetInt();
    if (!enabled) { return false; }

    int health     = players[consoleplayer].Health;
    int min_health = CVar.GetCVar("m8f_aas_health_limit").GetInt();

    if (health < min_health) { return false; }

    string toggle_name = m8f_aas_event.toggle_name(event_type);

    CVar variable = CVar.GetCVar(toggle_name);
    if (variable == null)
    {
      console.printf("Autoautosave Warning: variable %s not found", toggle_name);
      return false;
    }

    return variable.GetInt();
  }

  private static bool shotEnabled(int event_type)
  {
    if (event_type == m8f_aas_event.manual)
    {
      bool shot_on_manual = CVar.GetCVar("m8f_aas_shot_on_manual").GetInt();
      return shot_on_manual;
    }

    bool enabled = CVar.GetCVar("m8f_aas_enabled").GetInt();
    if (!enabled) { return false; }

    string toggle_name = m8f_aas_event.shot_toggle_name(event_type);

    CVar variable = CVar.GetCVar(toggle_name);
    if (variable == null)
    {
      console.printf("Autoautosave Warning: variable %s not found", toggle_name);
      return false;
    }

    return variable.GetInt();
  }

  override m8f_aas_event_handler init()
  {
    last_save_time = 0;
    return self;
  }

  override void on_event(int event_type)
  {
    int current_time          = level.time;
    int time_from_last_save_s = (current_time - last_save_time) / 35;
    int autosave_period_s     = CVar.GetCVar("m8f_aas_autosave_period").GetInt();

    if (event_type == m8f_aas_event.tick
        && time_from_last_save_s > autosave_period_s
        && CVar.GetCVar("m8f_aas_save_on_time_period").GetInt())
    {
      let dispatcher = new("m8f_aas_event_dispatcher").init();
      dispatcher.on_event(m8f_aas_event.time_period);
      return;
    }

    int min_save_wait_s = CVar.GetCVar("m8f_aas_min_save_wait").GetInt();
    if (time_from_last_save_s < min_save_wait_s
        && event_type != m8f_aas_event.manual) { return; }

    if (saveEnabled(event_type))
    {
      last_save_time = current_time;
      gameaction     = ga_autosave;
    }

    if (shotEnabled(event_type))
    {
      gameaction = ga_screenshot;
    }

  }

} // class m8f_aas_saver

class m8f_aas_event_source : EventHandler
{

  // constants section /////////////////////////////////////////////////////////

  const ticks_in_second = 35;
  const n_saveable_items_classes = 29;

  // attributes section ////////////////////////////////////////////////////////

  private bool    loading_finished;

  private int     oldActiveCount;
  private int     oldActiveBigCount;
  private int     maxActive;

  private int     old_kill_count;
  private int     old_item_count;
  private int     old_secret_count;

  private vector3 old_pos;

  private int     old_health;
  private int     old_armor;
  private double  old_armor_save;

  private int     seconds_from_last_save;

  private int     autosave_request;

  m8f_aas_event_handler handler;

  // override functions section ////////////////////////////////////////////////

  override void OnRegister()
  {
    loading_finished = false;
    autosave_request = -1;
  }

  override void WorldTick()
  {
    // request must not be processed in the same tick as it was received
    // because request CVar is not updated yet.
    if (autosave_request != -1)
      {
        handler.on_event(autosave_request);
        autosave_request = -1;
        return;
      }

    CVar autosave_request_cvar = CVar.GetCVar("m8f_aas_request");
    int  received_request      = autosave_request_cvar.GetInt();
    if (received_request != -1)
      {
        autosave_request_cvar.SetInt(-1);
        autosave_request = received_request;
      }

    if (level.time == 0) { return; }
    else { loading_finished = true; }

    int tick_inside_second = level.time % ticks_in_second;
    switch (tick_inside_second)
      {
      case  0: handler.on_event(m8f_aas_event.tick); break;
      case  9: check_counter_events(); return;
      case 18: check_map_events(); return;
      case 27: check_player_events(); return;
      default: return;
      }
  }

  void check_map_events()
  {
    PlayerInfo player = players[consoleplayer];

    {
      int secret_count = player.secretcount;
      if (secret_count > old_secret_count)
        {
          handler.on_event(m8f_aas_event.secret_found);
        }
      old_secret_count = secret_count;
    }

    {
      int kill_count = level.killed_monsters;
      if (kill_count != old_kill_count && kill_count == level.total_monsters)
        {
          handler.on_event(m8f_aas_event.all_kill);
        }
      old_kill_count = kill_count;
    }

    {
      int item_count = level.found_items;
      if (item_count != old_item_count && item_count == level.total_items)
        {
          handler.on_event(m8f_aas_event.all_items_found);
        }
      old_item_count = item_count;
    }
  }

  void check_player_events()
  {
    PlayerInfo player = players[consoleplayer];

    {
      vector3 pos = player.mo.Pos;
      float x_diff = (pos.x - old_pos.x);
      float y_diff = (pos.y - old_pos.y);
      float dist = x_diff * x_diff + y_diff * y_diff;
      if (dist > 2000000.0)
        {
          //Console.Printf("Distance: %f", dist);
          handler.on_event(m8f_aas_event.teleport);
        }
      old_pos = pos;
    }

    {
      int health      = player.mo.health;
      int health_down = CVar.GetCVar("m8f_aas_health_threshold_down").GetInt();
      int health_up   = CVar.GetCVar("m8f_aas_health_threshold_up").GetInt();
      if (health < health_down && old_health >= health_down)
        {
          handler.on_event(m8f_aas_event.health_drop);
        }
      else if (health > health_up && old_health <= health_up)
        {
          handler.on_event(m8f_aas_event.health_rise);
        }
      else if (health >= old_health + 50 && old_health > 0)
        {
          handler.on_event(m8f_aas_event.big_heal);
        }
      old_health = health;
    }

    {
      int armor_count = player.mo.CountInv("BasicArmor");
      int armor_down  = CVar.GetCVar("m8f_aas_armor_threshold_down").GetInt();
      int armor_up    = CVar.GetCVar("m8f_aas_armor_threshold_up").GetInt();
      if (armor_count < armor_down && old_armor >= armor_down)
        {
          handler.on_event(m8f_aas_event.armor_drop);
        }
      else if (armor_count > armor_up && old_armor <= armor_up)
        {
          handler.on_event(m8f_aas_event.armor_rise);
        }
      old_armor = armor_count;
    }

    {
      BasicArmor armor = BasicArmor(player.mo.FindInventory("BasicArmor"));
      if (armor != null)
        {
          double save_percent = armor.SavePercent;
          if (save_percent != 0.0 && save_percent != old_armor_save)
            {
              handler.on_event(m8f_aas_event.new_armor);
            }
          old_armor_save = save_percent;
        }
    }
  }

  void check_counter_events()
  {
    // count active monsters
    ThinkerIterator i   = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
    int activeCount     = 0;
    int activeBigCount  = 0;
    int min_boss_health = CVar.GetCVar("m8f_aas_min_boss_health").GetInt();
    Actor a;

    while (a = Actor(i.Next()))
      {
        if (a.bISMONSTER
            && a.Target != null
            && a.Health > 0)
          {
            if (a.SpawnHealth() >= min_boss_health) { ++activeBigCount; }
            ++activeCount;
          }
      }
    //Console.Printf("Counts: %d, %d", activeCount, activeBigCount);

    if (activeCount > maxActive) { maxActive = activeCount; }

    int group_number = CVar.GetCVar("m8f_aas_group_number").GetInt();
    if (activeCount >= oldActiveCount + group_number)
      {
        handler.on_event(m8f_aas_event.group_alert);
      }
    else if (activeCount == 0)
      {
        if (maxActive >= group_number)
          {
            handler.on_event(m8f_aas_event.group_kill);
          }
        maxActive = 0;
      }
    else if (activeBigCount > oldActiveBigCount)
      {
        handler.on_event(m8f_aas_event.boss_alert);
      }
    else if (activeBigCount < oldActiveBigCount)
      {
        handler.on_event(m8f_aas_event.boss_kill);
      }

    oldActiveCount = activeCount;
    oldActiveBigCount = activeBigCount;
  }

  override void PlayerEntered(PlayerEvent e)
  {
    if (e.PlayerNumber != consolePlayer) { return; }
    init_player();
  }

  void init_player()
  {
    oldActiveCount = 0;
    oldActiveBigCount = 0;
    maxActive = 0;

    old_kill_count = 0;
    old_item_count = 0;

    handler = new("m8f_aas_event_dispatcher").init();

    PlayerInfo pInfo  = players[consolePlayer];
    let player = PlayerPawn(pInfo.mo);
    old_pos    = player.Pos;
    old_health = player.Health;
    old_armor  = player.CountInv("BasicArmor");
    old_secret_count = pInfo.secretcount;

    BasicArmor armor = BasicArmor(player.FindInventory("BasicArmor"));
    if (armor) { old_armor_save = armor.SavePercent; }
    else       { old_armor_save = 0.0; }
  }

  override void WorldThingSpawned(WorldEvent e)
  {
    if (e == null) { return; }
    if (e.thing == null) { return; }

    // spawn special actor that saves the game when picked up
    // alongside inventory items.
    if (e.thing.GetClassName() == "m8f_aas_token") { return; }

    Inventory item = Inventory(e.thing);
    if (item == null) { return; }

    bool saveOnDropped = CVar.GetCVar("m8f_aas_save_on_dropped").GetInt();
    if (!saveOnDropped && loading_finished) { return; }

    static const string saveable_item_classes[] =
      {
        "Key",
        "FDKeyBase",
        "QCRedCard",
        "QCYellowCard",
        "QCBlueCard",
        "QCRedSkull",
        "QCYellowSkull",
        "QCBlueSkull",
        "Weapon", // weapons
        "Goonades",
        "SPAMMineItem",
        "PowerupGiver", // powerups
        "TBPowerupBase",
        "MapRevealer",
        "Berserk",
        "Speeders",
        "IcarusMk8",
        "ProtectoBand",
        "BigSPAMMine",
        "GuardBoi",
        "BadassGlasses",
        "Mapisto",
        "LovebirdTag",
        "BigScorePresent",
        "BackpackItem", // backpacks
        "Backpack2",
        "BlueprintItem",
        "NetronianBackpack",
        "Big_Coin_pickup" // other
      };
    static const int types[] =
      {
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.key,
        m8f_aas_event.weapon,
        m8f_aas_event.weapon,
        m8f_aas_event.weapon,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.powerup,
        m8f_aas_event.backpack,
        m8f_aas_event.backpack,
        m8f_aas_event.backpack,
        m8f_aas_event.backpack,
        m8f_aas_event.gs_gold_coin
      };

    for (int i = 0; i < n_saveable_items_classes; ++i)
      {
        if (!(item is saveable_item_classes[i])) { continue; }

        Actor owner = item.owner;
        if (owner == null)
          {
            m8f_aas_token(Actor.Spawn("m8f_aas_token", item.SpawnPoint))
              .init(types[i]);
          }
        else if (owner == players[consoleplayer].mo
                 && loading_finished) // don't save on obtaining starting weapons
          {
            string netronianBackpack = "NetronianBackpack";
            class<Actor> netronianBackpackClass = netronianBackpack;
            // don't save on BackpackItem for Netronian Chaos, save on
            // Netronian Backpack instead
            if (saveable_item_classes[i] == "BackpackItem"
                && netronianBackpackClass) { return; }

            handler.on_event(types[i]);
          }
        break;
      }
  }
}
