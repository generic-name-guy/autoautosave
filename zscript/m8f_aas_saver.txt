class m8f_aas_saver : m8f_aas_event_handler
{

  private int last_save_time;

  private static bool saveEnabled(int event_type)
  {
    if (event_type == m8f_aas_event.manual) { return true; }

    bool enabled = CVar.GetCVar("m8f_aas_enabled").GetInt();
    if (!enabled) { return false; }

    int health     = players[consoleplayer].Health;
    int min_health = CVar.GetCVar("m8f_aas_health_limit").GetInt();

    if (health < min_health) { return false; }

    string toggle_name = m8f_aas_event.toggle_name(event_type);

    CVar variable = CVar.GetCVar(toggle_name);
    if (variable == null)
    {
      console.printf("Autoautosave Warning: variable %s not found", toggle_name);
      return false;
    }

    return variable.GetInt();
  }

  private static bool shotEnabled(int event_type)
  {
    if (event_type == m8f_aas_event.manual)
    {
      bool shot_on_manual = CVar.GetCVar("m8f_aas_shot_on_manual").GetInt();
      return shot_on_manual;
    }

    bool enabled = CVar.GetCVar("m8f_aas_enabled").GetInt();
    if (!enabled) { return false; }

    string toggle_name = m8f_aas_event.shot_toggle_name(event_type);

    CVar variable = CVar.GetCVar(toggle_name);
    if (variable == null)
    {
      console.printf("Autoautosave Warning: variable %s not found", toggle_name);
      return false;
    }

    return variable.GetInt();
  }

  override m8f_aas_event_handler init()
  {
    last_save_time = 0;
    return self;
  }

  override void on_event(int event_type)
  {
    int current_time          = level.time;
    int time_from_last_save_s = (current_time - last_save_time) / 35;
    int autosave_period_s     = CVar.GetCVar("m8f_aas_autosave_period").GetInt();

    if (event_type == m8f_aas_event.tick
        && time_from_last_save_s > autosave_period_s
        && CVar.GetCVar("m8f_aas_save_on_time_period").GetInt())
    {
      let dispatcher = new("m8f_aas_event_dispatcher").init();
      dispatcher.on_event(m8f_aas_event.time_period);
      return;
    }

    int min_save_wait_s = CVar.GetCVar("m8f_aas_min_save_wait").GetInt();
    if (time_from_last_save_s < min_save_wait_s
        && event_type != m8f_aas_event.manual)
    {
      return;
    }

    if (saveEnabled(event_type))
    {
      last_save_time = current_time;
      gameaction     = ga_autosave;
    }

    if (shotEnabled(event_type))
    {
      let event_handler = m8f_aas_event_source(StaticEventHandler.Find("m8f_aas_event_source"));
      event_handler.requestScreenshot();
    }
  }

} // class m8f_aas_saver
